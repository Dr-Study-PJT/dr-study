#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

NORMAL='\033[0m'
BLUE='\033[0;34m'
IGREEN='\033[0;92m'
IRED='\033[0;91m'

echo -e "\n${BLUE}husky commit-msg hook을 실행합니다.${NORMAL}\n"

commitMessage=$(cat "$1")

# 현재 브랜치명 가져오기
branchName=$(git symbolic-ref --short HEAD)

# feature 브랜치명 패턴 확인
if [[ $branchName =~ ^feature- ]]; then
  domain=$(echo $branchName | sed -E 's/^feature-//')
  commitRegex="^feature\(${domain}\): \[.*\] .*"
else
  commitRegex="^(main|dev|chore|fix): .*"
fi

if ! [[ $commitMessage =~ $commitRegex ]]; then
  echo -e "${IRED}[ ERROR! ]: 커밋 메시지가 컨벤션을 준수하지 않았습니다. ${NORMAL}"
  if [[ $branchName =~ ^feature- ]]; then
    echo -e "${IRED} - 'feature(${domain}): [subfeature] 작업요약' 형식을 준수해야 합니다.${NORMAL}"
  else
    echo -e "${IRED} - 'main, dev, chore, fix: 작업요약' 형식을 준수해야 합니다.${NORMAL}"
  fi
  exit 1
fi
 
echo -e "\n${IGREEN}커밋 메시지가 컨벤션을 준수합니다.${NORMAL}\n"